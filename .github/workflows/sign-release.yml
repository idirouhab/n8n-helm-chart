name: Sign Release

on:
  workflow_dispatch:
    inputs:
      tag_name:
        description: 'Tag name to sign (e.g., v0.11.0)'
        required: true
        type: string

permissions:
  contents: write
  id-token: write
  actions: read

jobs:
  sign-release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configure Git
        run: |
          git config user.name "$GITHUB_ACTOR"
          git config user.email "$GITHUB_ACTOR@users.noreply.github.com"

      - name: Install Helm
        uses: azure/setup-helm@v3
        with:
          version: '3.12.1' # helm

      - name: Update Chart Version
        run: |
          # Extract version from tag (remove 'v' prefix)
          CHART_VERSION="${{ inputs.tag_name }}"
          CHART_VERSION="${CHART_VERSION#v}"
          sed -i "s/^version:.*/version: $CHART_VERSION/" charts/n8n-app/Chart.yaml

          echo "Updated chart version to: $CHART_VERSION"

      - name: Package Chart
        run: |
          helm package charts/n8n-app --destination ./charts/

      - name: Generate hashes
        shell: bash
        id: hash
        run: |
          echo "hashes=$(sha256sum charts/*.tgz | base64 -w0)" >> "$GITHUB_OUTPUT"

      - name: Upload Release Assets
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release upload ${{ inputs.tag_name }} charts/*.tgz --clobber

      - name: Log in to Docker Hub
        env:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
        run: |
          if [ -z "$DOCKERHUB_USERNAME" ] || [ -z "$DOCKERHUB_TOKEN" ]; then
            echo "‚ùå DOCKERHUB_USERNAME or DOCKERHUB_TOKEN secrets not set"
            exit 1
          fi
          echo "$DOCKERHUB_TOKEN" | helm registry login registry-1.docker.io -u "$DOCKERHUB_USERNAME" --password-stdin

      - name: Push chart to Docker Hub OCI
        env:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
        run: |
          CHART_NAME=$(helm show chart charts/n8n-app | awk '/^name:/{print $2}')
          CHART_VERSION=$(helm show chart charts/n8n-app | awk '/^version:/{print $2}')
          helm push "charts/${CHART_NAME}-${CHART_VERSION}.tgz" "oci://registry-1.docker.io/${DOCKERHUB_USERNAME}"
          echo "‚úÖ Chart published: oci://registry-1.docker.io/${DOCKERHUB_USERNAME}/${CHART_NAME}:${CHART_VERSION}"
          echo "üîó Docker Hub repo: https://hub.docker.com/repository/docker/${DOCKERHUB_USERNAME}/${CHART_NAME}/general"

      - name: Install ORAS
        uses: oras-project/setup-oras@v1
        with:
          version: 1.0.0

      - name: Install Cosign
        uses: sigstore/cosign-installer@v3
        with:
          cosign-release: 'v2.2.4'

      - name: Tag Helm chart as :latest
        if: ${{ !contains(inputs.tag_name, '-') }}
        env:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
        run: |
          CHART_NAME=$(helm show chart charts/n8n-app | awk '/^name:/{print $2}')
          CHART_VERSION=$(helm show chart charts/n8n-app | awk '/^version:/{print $2}')
          echo "$DOCKERHUB_TOKEN" | oras login registry-1.docker.io -u "$DOCKERHUB_USERNAME" --password-stdin

          SRC="registry-1.docker.io/${DOCKERHUB_USERNAME}/${CHART_NAME}:${CHART_VERSION}"
          DST="registry-1.docker.io/${DOCKERHUB_USERNAME}/${CHART_NAME}:latest"

          oras copy "${SRC}" "${DST}"
          echo "üîñ Tagged ${SRC} as ${DST}"

      - name: Sign Helm chart with Cosign
        env:
          COSIGN_EXPERIMENTAL: 1
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
        run: |
          CHART_NAME=$(helm show chart charts/n8n-app | awk '/^name:/{print $2}')
          CHART_VERSION=$(helm show chart charts/n8n-app | awk '/^version:/{print $2}')

          # Sign the chart artifact
          cosign sign --yes "registry-1.docker.io/${DOCKERHUB_USERNAME}/${CHART_NAME}:${CHART_VERSION}"

          # Sign the latest tag if this is not a pre-release
          if [[ ! "${{ inputs.tag_name }}" =~ "-" ]]; then
            cosign sign --yes "registry-1.docker.io/${DOCKERHUB_USERNAME}/${CHART_NAME}:latest"
          fi

          echo "üîê Chart artifacts signed with Cosign"

  # SLSA provenance generation as separate job
  provenance:
    needs: [sign-release]
    permissions:
      actions: read
      id-token: write
      contents: write
    uses: slsa-framework/slsa-github-generator/.github/workflows/generator_generic_slsa3.yml@v1.10.0
    with:
      base64-subjects: ${{ needs.sign-release.outputs.hashes }}
      provenance-name: "n8n-helm-chart.intoto.jsonl"

  upload-provenance:
    runs-on: ubuntu-latest
    needs: [provenance]
    steps:
      - name: Download provenance
        uses: actions/download-artifact@v4
        with:
          name: n8n-helm-chart.intoto.jsonl

      - name: Upload provenance to release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release upload ${{ inputs.tag_name }} n8n-helm-chart.intoto.jsonl --clobber