name: Release

on:
  push:
    branches:
      - main

permissions:
  contents: write
  pull-requests: write
  id-token: write
  actions: read

jobs:
  release:
    runs-on: ubuntu-latest
    outputs:
      new_release_published: ${{ steps.semantic.outputs.new_release_published }}
      new_release_version: ${{ steps.semantic.outputs.new_release_version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: |
          npm install -g semantic-release @semantic-release/changelog @semantic-release/git @semantic-release/exec

      - name: Release
        id: semantic
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          SEMANTIC_OUTPUT=$(npx semantic-release 2>&1)
          echo "$SEMANTIC_OUTPUT"

          if echo "$SEMANTIC_OUTPUT" | grep -q "Published release"; then
            echo "new_release_published=true" >> $GITHUB_OUTPUT
            # Extract version from the output or git tags
            VERSION=$(git describe --tags --abbrev=0 2>/dev/null | sed 's/^v//' || echo "")
            echo "new_release_version=$VERSION" >> $GITHUB_OUTPUT
          else
            echo "new_release_published=false" >> $GITHUB_OUTPUT
            echo "new_release_version=" >> $GITHUB_OUTPUT
          fi

  publish:
    runs-on: ubuntu-latest
    needs: release
    if: ${{ needs.release.outputs.new_release_published }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: main

      - name: Configure Git
        run: |
          git config user.name "$GITHUB_ACTOR"
          git config user.email "$GITHUB_ACTOR@users.noreply.github.com"

      - name: Install Helm
        uses: azure/setup-helm@v3
        with:
          version: '3.12.1'

      - name: Package Chart
        run: |
          helm package charts/n8n --destination ./charts/

      - name: Upload Release Assets
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release upload v${{ needs.release.outputs.new_release_version }} charts/*.tgz --clobber

      - name: Log in to Docker Hub
        env:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
        run: |
          if [ -z "$DOCKERHUB_USERNAME" ] || [ -z "$DOCKERHUB_TOKEN" ]; then
            echo "‚ùå DOCKERHUB_USERNAME or DOCKERHUB_TOKEN secrets not set"
            exit 1
          fi
          echo "$DOCKERHUB_TOKEN" | helm registry login registry-1.docker.io -u "$DOCKERHUB_USERNAME" --password-stdin

      - name: Push chart to Docker Hub OCI
        env:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
        run: |
          CHART_NAME=$(helm show chart charts/n8n | awk '/^name:/{print $2}')
          CHART_VERSION=$(helm show chart charts/n8n | awk '/^version:/{print $2}')

          echo "üìã Chart details:"
          echo "  Chart name: $CHART_NAME"
          echo "  Chart version: $CHART_VERSION"
          echo "  Target registry: oci://registry-1.docker.io/${DOCKERHUB_USERNAME}"
          echo "  Package file: charts/${CHART_NAME}-${CHART_VERSION}.tgz"

          if [ ! -f "charts/${CHART_NAME}-${CHART_VERSION}.tgz" ]; then
            echo "‚ùå Package file not found!"
            ls -la charts/
            exit 1
          fi

          # Push chart (already logged in from previous step)
          echo "üöÄ Pushing chart..."
          helm push "charts/${CHART_NAME}-${CHART_VERSION}.tgz" "oci://registry-1.docker.io/${DOCKERHUB_USERNAME}"

          echo "‚úÖ Chart published: oci://registry-1.docker.io/${DOCKERHUB_USERNAME}/${CHART_NAME}:${CHART_VERSION}"
          echo "üîó Docker Hub repo: https://hub.docker.com/repository/docker/${DOCKERHUB_USERNAME}/${CHART_NAME}/general"

      - name: Install ORAS
        uses: oras-project/setup-oras@v1
        with:
          version: 1.0.0

      - name: Tag Helm chart as :latest
        if: ${{ !contains(needs.release.outputs.new_release_version, '-') }}
        env:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
        run: |
          CHART_NAME=$(helm show chart charts/n8n | awk '/^name:/{print $2}')
          CHART_VERSION=$(helm show chart charts/n8n | awk '/^version:/{print $2}')
          echo "$DOCKERHUB_TOKEN" | oras login registry-1.docker.io -u "$DOCKERHUB_USERNAME" --password-stdin

          SRC="registry-1.docker.io/${DOCKERHUB_USERNAME}/${CHART_NAME}:${CHART_VERSION}"
          DST="registry-1.docker.io/${DOCKERHUB_USERNAME}/${CHART_NAME}:latest"

          oras copy "${SRC}" "${DST}"
          echo "üîñ Tagged ${SRC} as ${DST}"